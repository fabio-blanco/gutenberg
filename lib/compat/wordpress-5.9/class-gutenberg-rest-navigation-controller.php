<?php
/**
 * REST API: Gutenberg_REST_Templates_Controller class
 *
 * @package    Gutenberg
 * @subpackage REST_API
 */

/**
 * Base Templates REST API Controller.
 */
class Gutenberg_REST_Navigation_Controller extends WP_REST_Posts_Controller {
	/**
	 * Post type.
	 *
	 * @var string
	 */
	protected $post_type;

	/**
	 * Constructor.
	 *
	 * @param string $post_type Post type.
	 */
	public function __construct( $post_type ) {
		$this->post_type = $post_type;
		$this->namespace = 'wp/v2';
		$obj             = get_post_type_object( $post_type );
		$this->rest_base = ! empty( $obj->rest_base ) ? $obj->rest_base : $obj->name;
	}

	/**
	 * Registers the controllers routes.
	 *
	 * @return void
	 */
	public function register_routes() {
		// Lists all templates.
		register_rest_route(
			$this->namespace,
			'/' . $this->rest_base,
			array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_items' ),
					'permission_callback' => array( $this, 'get_items_permissions_check' ),
					'args'                => $this->get_collection_params(),
				),
				array(
					'methods'             => WP_REST_Server::CREATABLE,
					'callback'            => array( $this, 'create_item' ),
					'permission_callback' => array( $this, 'create_item_permissions_check' ),
					'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),
				),
				'schema' => array( $this, 'get_public_item_schema' ),
			)
		);

		// Lists/updates a single nav item based on the given id.
		register_rest_route(
			$this->namespace,
			'/' . $this->rest_base . '/(?P<id>[\/\w-]+)',
			array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_item' ),
					'permission_callback' => array( $this, 'get_item_permissions_check' ),
					'args'                => array(
						'id' => array(
							'description' => __( 'The id of a navigation', 'gutenberg' ),
							'type'        => 'string',
						),
					),
				),
				array(
					'methods'             => WP_REST_Server::EDITABLE,
					'callback'            => array( $this, 'update_item' ),
					'permission_callback' => array( $this, 'update_item_permissions_check' ),
					'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),
				),
				array(
					'methods'             => WP_REST_Server::DELETABLE,
					'callback'            => array( $this, 'delete_item' ),
					'permission_callback' => array( $this, 'delete_item_permissions_check' ),
					'args'                => array(
						'force' => array(
							'type'        => 'boolean',
							'default'     => false,
							'description' => __( 'Whether to bypass Trash and force deletion.', 'gutenberg' ),
						),
					),
				),
				'schema' => array( $this, 'get_public_item_schema' ),
			)
		);
	}

	/**
	 * Checks if the user has permissions to make the request.
	 *
	 * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
	 */
	protected function permissions_check() {
		// Verify if the current user has edit_theme_options capability.
		// This capability is required to edit/view/delete templates.
//		if ( ! current_user_can( 'edit_theme_options' ) ) {
//			return new WP_Error(
//				'rest_cannot_manage_templates',
//				__( 'Sorry, you are not allowed to access the templates on this site.', 'gutenberg' ),
//				array(
//					'status' => rest_authorization_required_code(),
//				)
//			);
//		}

		return true;
	}

	public function get_item_permissions_check( $request ) {
		return true;
	}

	public function create_item_permissions_check( $request ) {
		return true;
	}

	public function update_item_permissions_check( $request ) {
		return true;
	}

	public function delete_item_permissions_check( $request ) {
		return true;
	}

	protected function check_update_permission( $post ) {
		return true;
	}

	public function get_items_permissions_check( $request ) {
		return true;
	}

	public function check_read_permission( $post ) {
		return true;
	}

	protected function check_create_permission( $post ) {
		return true;
	}

	protected function check_delete_permission( $post ) {
		return true;
	}

	protected function handle_status_param( $post_status, $post_type ) {
		return $post_status;
	}

	public function filter_response_by_context( $data, $context ) {
		$data['id'] = $data['slug'];
		return $data;
	}

	public function get_item_schema() {
		$schema = parent::get_item_schema(); // TODO: Change the autogenerated stub
		$schema['properties']['id']['type'] = 'string';
		return $schema;
	}


	protected function get_post( $id ) {
		$wp_query_args        = array(
			'name'           => $id,
			'post_type'      => 'wp_navigation',
			'post_status'    => array( 'auto-draft', 'draft', 'publish', 'trash' ),
			'posts_per_page' => 1,
			'no_found_rows'  => true,
		);
		$template_query       = new WP_Query( $wp_query_args );
		$post = $template_query->posts[0];
		if(!$post) {
			return new WP_Error(
				'rest_post_invalid_id',
				__( 'Invalid post ID.' ),
				array( 'status' => 404 )
			);
		}
		return $post;
	}



}
